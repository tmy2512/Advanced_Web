@model IEnumerable<ManagementAssistanceForBusinessWeb_OnlyRole.Models.TaskViewModels.CreateNewTaskModel>
@using ManagementAssistanceForBusinessWeb_OnlyRole.Models

@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Retrieve the lists from ViewData
}


<div id="board-details-container" class="board-details-container">
   <div class="board-column">
    @* <h2>To do for Project @ViewBag.ProjectID @ViewBag.Name</h2> *@
    <h2>To do</h2>
        @foreach (var task in @ViewBag.Tasks.TodoTasks)
        {
         <div class="board-task-card">
         <div class="board-task-header">
                    <span>@task.Name</span>
            <div class="dropdown">
                <span href="#" class="icon-container">
                   <i class="icon icon-ellipsis"></i>
                </span>
                <div class="dropdown-content">
                   <a >Edit</a>
                   <a href="#">Remove</a>
                </div>
            </div>
        </div>
        <div class="board-task-title">Title</div>
        <div class="board-task-footer">
               <span>Updated at: @task.UpdatedAt.ToString("dd/MM/yyyy")</span>
               @* <span>@task.ProjectID</span> *@
              <span class="board-tag">Tag</span>
        </div>
    </div>
    }
    <button class="add-task-btn" data-toggle="modal" data-target="#addTaskModal"  onclick="setStatusInModal('ToDo')">+ Add new task</button>
    
    </div>

    @* <!-- Sample Task Card --> *@
   
    <div class="board-column">
    <h2>Doing</h2>
        @foreach (var task in @ViewBag.Tasks.DoingTasks)
        {
             <div class="board-task-card">
             <div class="board-task-header">
                        <span>@task.Name</span>
                <div class="dropdown">
                    <span href="#" class="icon-container">
                       <i class="icon icon-ellipsis"></i>
                    </span>
                    <div class="dropdown-content">
                       <a >Edit</a>
                       <a href="#">Remove</a>
                    </div>
                </div>
            </div>
            <div class="board-task-title">Title</div>
            <div class="board-task-footer">
                    <span>Updated at: @task.UpdatedAt.ToString("dd/MM/yyyy")</span>
                    @* <span>@task.ProjectID</span> *@
                    <span class="board-tag">Tag</span>
            </div>
        </div>
        }
        <button class="add-task-btn" data-toggle="modal" data-target="#addTaskModal" data-status="Doing" onclick="setStatusInModal('Doing')">+ Add new task</button>
    </div>

    @* <!-- Sample Task Card --> *@

    <div class="board-column">
    <h2>Done</h2>
        @foreach (var task in @ViewBag.Tasks.DoneTasks)
        {
            <div class="board-task-card">
                <div class="board-task-header">
                            <span>@task.Name</span>
                    <div class="dropdown">
                        <span href="#" class="icon-container">
                           <i class="icon icon-ellipsis"></i>
                        </span>
                        <div class="dropdown-content">
                            <a >Edit</a>
                            <a href="#">Remove</a>
                        </div>
                    </div>
                </div>
                <div class="board-task-title">Title</div>
                <div class="board-task-footer">
                    <span>Updated at: @task.UpdatedAt.ToString("dd/MM/yyyy")</span>
                    @* <span>@task.ProjectID</span> *@
                    <span class="board-tag">Tag</span>

                </div>
            </div>
            }
                <button class="add-task-btn" data-toggle="modal" data-target="#addTaskModal"  data-status="Done"  onclick="setStatusInModal('Done')">+ Add new task</button>
     
    </div>

    @* <!-- Sample Task Card --> *@
</div>
</div>

@* Render partialview *@
@await Html.PartialAsync("AddNewTask", new ManagementAssistanceForBusinessWeb_OnlyRole.Models.TaskViewModels.CreateNewTaskModel { ProjectID = ViewBag.ProjectID })
<script>
    function setStatusInModal(status) {
    var modal = $('#addTaskModal');
    modal.find('input[name="status"]').prop('checked', false); // Uncheck all radio buttons
    modal.find('input[value="' + status + '"]').prop('checked', true); // Check the corresponding radio button
    
    console.log('dsfhjdsk');
    // load user with role = user from user table
    $.ajax({
        url: '/User/GetUserByRole',
        type: 'GET',
        success: function(data) {
            modal.find('#userSelectContainer').html(data);
        }
    });
    modal.modal('show'); // Show the modal
}

//    $(document).ready(function() {
//     $('#addTaskModal').on('show.bs.modal', function(event) {
//         var button = $(event.relatedTarget); // Button that triggered the modal
//         var status = button.data('status'); // Extract info from data-* attributes
//         console.log('aassss');
//         // Update the modal's content.
//         var modal = $(this);
//         modal.find('input[name="status"]').prop('checked', false); // Uncheck all radio buttons
//         modal.find('input[value="' + status + '"]').prop('checked', true); // Check the corresponding radio button
//     });
// });


</script>
<style>
    .board-details-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    padding: 20px;
}

.board-details-container .board-column {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 10px;
    margin: 10px;
    flex: 1;
    min-width: 250px;
}

.board-details-container .board-column h2 {
    font-size: 1.2em;
    margin-bottom: 10px;
}

.board-details-container .board-task-card {
    background-color: #fafafa;
    border: 1px solid #eee;
    border-radius: 5px;
    margin-bottom: 10px;
    padding: 10px;
    cursor: pointer;
}
.board-details-container .board-task-header span {
    font-weight: bold;
}

.board-details-container .board-task-header {
    margin-bottom: 5px;
}

.board-details-container .board-task-title {
    font-size: 1em;
    margin-bottom: 5px;
}

.board-details-container .board-task-desc {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 10px;
}

.board-details-container .board-task-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8em;
}

.board-details-container .board-tag {
    background-color: #007bff;
    color: #fff;
    border-radius: 3px;
    padding: 2px 5px;
}
/* Button to add new task */
.add-task-btn {
    background-color: #4CAF50; /* Green background */
    color: white; /* White text */
    border: none; /* Remove border */
    padding: 10px 20px; /* Add padding */
    text-align: center; /* Center text */
    text-decoration: none; /* Remove underline */
    display: inline-block; /* Align button */
    font-size: 16px; /* Increase font size */
    margin: 10px 0; /* Add margin */
    cursor: pointer; /* Pointer cursor on hover */
}

/* Container for the dropdown button */
.board-task-header .dropdown {
    position: relative; /* Relative positioning for the dropdown */
    display: inline-block; /* Align dropdown */
    left: 80%;
}

.board-task-header .dropdown:hover .icon-container {
    background-color: #f1f1f1;
    /* height: 10px; */
}

.board-task-header .icon-container {
    color: #fff;
    text-decoration: none;
    display: flex;
    justify-content: center;
    align-items: center;
    padding:  0;
    transition: background-color 0.3s;
    width: 100%;
}

    .board-task-header.icon-container > i:hover {
       background-color: #f1f1f1;
    }

/* .vertical-navbar .icon {
    font-size: 15px;
}
 */
.board-task-header .dropdown-content {
    display: none;
    position: absolute;
    left: 60px; /* Aligns the submenu to the right of the main menu */
    top: 0;
    background-color: white;
    /* box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1); */
    list-style: none;
    padding: 0;
    margin: 0;
    width: 200px;
}
 .board-task-header .dropdown-content a {
        color: black;
        text-decoration: none;
        display: block;
        padding: 10px 20px;
        transition: background-color 0.3s;
    }

    .board-task-header .dropdown-content a:hover {
             background-color: #f1f1f1;
        }

.board-task-header .dropdown:hover .dropdown-content {
    display: block;
    position: absolute;
    left: 20px;
    top: 0;
    padding: 0;
    margin: 0;
}
.icon-ellipsis::before {
    content: "\2026"; /* Unicode for horizontal ellipsis (three dots) */
    color: black;
}

</style>

